/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@use 'sass:map';
@use '@angular/material' as mat;
@use '../../../../../../../assets/utils.scss' as utils;

@mixin generate-theme($material-theme, $nifi-theme) {
    // Get the color config from the theme.
    $material-theme-color-config: mat.get-color-config($material-theme);
    $nifi-theme-color-config: mat.get-color-config($nifi-theme);

    // Get the color palette from the color-config.
    $material-theme-primary-palette: map.get($material-theme-color-config, 'primary');

    // Get hues from palette
    $surface-darker: utils.get-surface($nifi-theme-color-config, darker);
    $on-surface-highlight: utils.get-on-surface($nifi-theme-color-config, highlight);
    $on-surface-lighter: utils.get-on-surface($nifi-theme-color-config, lighter);

    // Use the same logic as _navigation.component-theme.scss to determine the bg color for hover
    $hover-bg: mat.get-color-from-palette($material-theme-primary-palette, 'navbar');
    @if ($hover-bg) {
        // Nothing to do here, we have special color from the palette.
    } @else {
        // There was not a special value set for the navbar, so we use Angular Material behavior.
        $hover-bg: mat.get-color-from-palette($material-theme-primary-palette, 'default');
    }

    .new-canvas-item {
        .icon {
            &.hovering {
                // This solution re-uses the highlight value used throughout the UI, but because we need to hide the non-hover
                // version of the icons, we create a double layered gradient with the matching background color of the
                // navigation bar, then put the highlight on top of it.
                background: linear-gradient($on-surface-highlight, $on-surface-highlight),
                    linear-gradient($hover-bg, $hover-bg);

                .component-button-grip {
                    background: repeating-linear-gradient(
                        90deg,
                        $on-surface-lighter,
                        $on-surface-lighter 4px,
                        transparent 4px,
                        transparent 6px
                    );
                }
            }

            &.cdk-drag-dragging {
                color: utils.get-color-on-surface($material-theme-color-config, $surface-darker);
                mix-blend-mode: difference; // Make sure the dragged icon is always visible
            }
        }
    }
}
