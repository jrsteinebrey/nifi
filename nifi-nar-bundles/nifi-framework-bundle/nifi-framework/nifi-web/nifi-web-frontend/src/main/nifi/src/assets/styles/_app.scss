/*!
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@use 'sass:map';
@use '@angular/material' as mat;
@use '../utils.scss' as utils;

@mixin styles() {
    html,
    body {
        height: 100%;
    }

    body {
        margin: 0;
        font-family: Roboto, 'Helvetica Neue', sans-serif;
    }

    a {
        font-size: 13px;
        cursor: pointer;
        font-weight: normal;
        display: inline-block;
        font-family: Roboto;
        text-decoration: underline;
        text-underline-offset: 3px;
    }

    //Icon for styling mat-icon in forms throughout the application.
    .info-icon {
        font-size: 14px;
        height: 14px !important;
        width: 14px !important;
    }

    //This style is needed due to an incompatibility between material and tailwind.
    .mdc-notched-outline__notch {
        border-right: none;
    }

    .small-dialog {
        min-width: 320px;
    }

    .medium-dialog {
        min-width: 470px;
    }

    .medium-short-dialog {
        max-height: 32%;
        max-width: 34%;
        min-height: 250px;
        min-width: 440px;
        font-size: 13px;
    }

    .large-dialog {
        max-height: 72%;
        max-width: 55%;
        min-height: 520px;
        min-width: 760px;
    }

    .xl-dialog {
        max-height: 72%;
        max-width: 85%;
        min-height: 560px;
        min-width: 1024px;
    }

    .edit-parameter-context-dialog {
        max-height: 72%;
        max-width: 55%;
        min-width: 850px;
        min-height: 575px;
    }

    .tooltip {
        position: fixed;
        max-width: 500px;
        padding: 10px;
        border-radius: 2px;
        border-width: 1px;
        font-size: 13px;
        font-family: Roboto;
        font-weight: 400;
        word-wrap: break-word;
        white-space: normal;
        z-index: 1;

        ul {
            list-style: disc outside;
            margin-left: 1em;
        }
    }

    .property-editor {
        font-size: 13px;
        font-family: Roboto;
        font-weight: 400;
    }

    .CodeMirror-hints {
        font-size: 13px !important;
        z-index: 1000 !important;
        overflow-y: scroll !important;
    }

    .blank,
    .unset,
    .sensitive {
        font-weight: normal !important;
    }

    .mat-mdc-icon-button {
        --mdc-icon-button-state-layer-size: 28px;
        --mdc-icon-button-icon-size: 14px;
        line-height: var(--mdc-icon-button-state-layer-size);
        padding: 0;

        &.mat-mdc-button-base.mdc-icon-button {
            padding: 0;
        }
    }

    .pointer {
        cursor: pointer;
    }

    .disabled {
        cursor: not-allowed;
    }

    .value,
    .refresh-timestamp {
        font-weight: 500;
    }
}

@mixin colors($material-theme, $canvas-theme) {
    // Get the color config from the theme.
    $color-config: mat.get-color-config($material-theme);
    $canvas-color-config: mat.get-color-config($canvas-theme);

    // Get the color palette from the color-config.
    $primary-palette: map.get($color-config, 'primary');
    $accent-palette: map.get($color-config, 'accent');
    $warn-palette: map.get($color-config, 'warn');
    $canvas-primary-palette: map.get($canvas-color-config, 'primary');
    $canvas-accent-palette: map.get($canvas-color-config, 'accent');

    // Get hues from palette

    // Start with the canvas theme.
    $canvas-primary-palette-A200: mat.get-color-from-palette($canvas-primary-palette, A200);
    $canvas-primary-palette-500: mat.get-color-from-palette($canvas-primary-palette, 500);
    $canvas-accent-palette-lighter: mat.get-color-from-palette($canvas-accent-palette, lighter);
    $canvas-accent-palette-default: mat.get-color-from-palette($canvas-accent-palette, default);

    $primary-palette-lighter: mat.get-color-from-palette($primary-palette, lighter);
    $primary-palette-default: mat.get-color-from-palette($primary-palette, 'default');
    $primary-palette-A400: mat.get-color-from-palette($primary-palette, 'A400');

    $accent-palette-lighter: mat.get-color-from-palette($accent-palette, 'lighter');

    $warn-palette-lighter: mat.get-color-from-palette($warn-palette, lighter);
    $warn-palette-default: mat.get-color-from-palette($warn-palette, 'default');

    // Alternative hue for warn colors.
    $warn-palette-A200: mat.get-color-from-palette($warn-palette, 'A200');

    $surface: utils.get-surface($canvas-color-config);
    $surface-darker: utils.get-surface($canvas-color-config, darker);
    $surface-highlight: utils.get-on-surface($canvas-color-config, highlight);
    $on-surface: utils.get-on-surface($canvas-color-config);
    $on-surface-lighter: utils.get-on-surface($canvas-color-config, lighter);

    // Because snackbars have different surface colors, we need to make sure the action color has enough contrast.
    $is-dark: map.get($color-config, is-dark);
    $snack-surface: if($is-dark, #d9d9d9, #333333);
    $snack-action-color: utils.get-color-on-surface($color-config, $snack-surface, 'accent');

    * {
        // Tailwind sets a default that doesn't shift with light and dark themes
        border-color: $on-surface-lighter;
        --mat-snack-bar-button-color: #{$snack-action-color};
    }

    .cdk-drag-disabled {
        cursor: not-allowed !important;
        background: $on-surface-lighter !important;
    }

    .cdk-drag-preview {
        box-sizing: border-box;
        border-radius: 4px;
        box-shadow: 0 3px 6px $canvas-primary-palette-A200;
    }

    .cdk-drag-placeholder {
        opacity: 0;
    }

    .cdk-drop-list-dragging {
        cursor: grabbing;
    }

    a {
        color: utils.get-color-on-surface($color-config, $surface);
        text-decoration-color: $primary-palette-lighter;
    }

    a:hover {
        text-decoration-color: utils.get-color-on-surface($color-config, $surface);
    }

    .tooltip {
        background-color: $surface;
        border-color: $on-surface;
        box-shadow: 0 2px 5px $canvas-primary-palette-A200;
        color: $on-surface;
    }

    .property-editor {
        background-color: $surface;
        box-shadow: 0 2px 5px $canvas-primary-palette-A200;
    }

    .disabled {
        color: $primary-palette-default !important;
        fill: $primary-palette-default !important;
    }

    .enabled {
        color: $primary-palette-A400 !important;
        fill: $primary-palette-A400 !important;
    }

    .stopped {
        color: $warn-palette-lighter !important;
        fill: $warn-palette-lighter !important;
    }

    .running {
        color: $canvas-accent-palette-lighter !important;
        fill: $canvas-accent-palette-lighter !important;
    }

    .has-errors,
    .invalid {
        color: $warn-palette-A200 !important;
        fill: $warn-palette-A200 !important;
    }

    .validating {
        color: $canvas-primary-palette-500 !important;
        fill: $canvas-primary-palette-500 !important;
    }

    .transmitting {
        color: $canvas-accent-palette-default !important;
        fill: $canvas-accent-palette-default !important;
    }

    .up-to-date {
        color: $canvas-accent-palette-default !important;
        fill: $canvas-accent-palette-default !important;
    }

    .locally-modified,
    .sync-failure {
        color: $accent-palette-lighter !important;
        fill: $accent-palette-lighter !important;
    }

    .stale,
    .locally-modified-and-stale {
        color: $warn-palette-default !important;
        fill: $warn-palette-default !important;
    }

    .zero {
        opacity: 0.5;
    }

    .blank,
    .unset,
    .sensitive {
        color: $canvas-primary-palette-500 !important;
    }

    .mat-mdc-icon-button {
        color: utils.get-color-on-surface($color-config, $surface-darker) !important;
    }

    .mat-mdc-icon-button:hover {
        background-color: $surface-highlight !important;
    }

    .mat-mdc-icon-button:disabled {
        color: $on-surface-lighter !important;
        background-color: transparent !important;

        i {
            color: $on-surface-lighter !important;
        }
    }

    .value,
    .refresh-timestamp {
        color: utils.get-color-on-surface($color-config, $surface, 'accent');
    }

    h3.page-header {
        color: $primary-palette-default;
    }

    ngx-skeleton-loader .skeleton-loader {
        background: $on-surface-lighter;
    }
}
